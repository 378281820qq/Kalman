{
  "name": "Kalman",
  "tagline": "Some Python Implementations of the Kalman Filter",
  "body": "####See [Vimeo](https://vimeo.com/album/2754700/sort:preset/format:detail) for some Explanations.\r\n\r\n![Kalman Filter Step](https://raw.githubusercontent.com/balzer82/Kalman/master/Kalman-Filter-Step.png)\r\n\r\n### Kalman Filter with Constant Velocity Model\r\n\r\nSituation covered: You drive with your car in a tunnel and the GPS signal is lost. Now the car has to determine, where it is in the tunnel. The only information it has, is the velocity in driving direction. The x and y component of the velocity (x˙ and y˙) can be calculated from the absolute velocity (revolutions of the wheels) and the heading of the vehicle (yaw rate sensor).\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CV.ipynb?create=1) ~ [See Vimeo](https://vimeo.com/87854542)\r\n\r\n### Kalman Filter with Constant Acceleration Model\r\n\r\n#### in 2D\r\n\r\nSituation covered: You have an acceleration sensor (in 2D: $\\ddot x¨ and y¨) and try to calculate velocity (x˙ and y˙) as well as position (x and y) of a person holding a smartphone in his/her hand.\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CA.ipynb?create=1) ~ [See Vimeo](https://vimeo.com/87854541)\r\n\r\nSecond example is the same dynamic model but this time you measure the position as well as the acceleration. Both values have to be fused together with the Kalman Filter.\r\nSituation covered: You have an acceleration sensor (in 2D: x¨ and y¨) and a Position Sensor (e.g. GPS) and try to calculate velocity (x˙ and y˙) as well as position (x and y) of a person holding a smartphone in his/her hand.\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CA-2.ipynb?create=1) ~ [See Vimeo](https://vimeo.com/87854540)\r\n\r\n\r\n#### in 3D\r\n\r\nThird example is in 3D space, so the state vector is 9D. This model is for ball tracking or something else in 3D space.\r\n\r\n![Kalman 3D](https://raw.githubusercontent.com/balzer82/Kalman/master/Kalman-Filter-CA-Ball-StateEstimated.png)\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-CA-Ball.ipynb?create=1)\r\n\r\n### Adaptive Kalman Filter with Constant Velocity Model\r\n\r\nHere the Measurement Covariance Matrix R is calculated dynamically via the maximum likelihood of the acutal standard deviation of the last measurements.\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Adaptive-Kalman-Filter-CV.ipynb?create=1)\r\n\r\n### Kalman Filter for Motorbike Lean Angle Estimation\r\n\r\nAlso know as the Gimbal Stabilization problem: You can measure the rotationrate, but need some validation for the correct lean angle from time to time, because simply an integration of the rotationrate adds up a lot of noise. There comes the vertical acceleration, which is a pretty good estimator for the angle in static situations. This Kalman Filter implementation fuses both together with some adaptive components.\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Kalman-Filter-Bike-Lean-Angle.ipynb?create=1)\r\n\r\n\r\n## Extended Kalman Filter\r\n\r\n![EKF Filter Step](https://raw.githubusercontent.com/balzer82/Kalman/master/Extended-Kalman-Filter-Step.png)\r\n\r\n### Extended Kalman Filter with Constant Turn Rate and Velocity (CTRV) Model\r\n\r\nSituation covered: You have an velocity sensor which measures the vehicle speed (v) in heading direction (ψ) and a yaw rate sensor (ψ˙) which both have to fused with the position (x & y) from a GPS sensor.\r\n\r\n![State Vector](https://raw.githubusercontent.com/balzer82/Kalman/master/CTRV-Model.png)\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Extended-Kalman-Filter-CTRV.ipynb?create=1) ~ [See Vimeo](https://vimeo.com/88057157)\r\n\r\n### Extended Kalman Filter with Constant Turn Rate and Acceleration (CTRA) Model\r\n\r\nSituation covered: You have an acceleration and velocity sensor which measures the vehicle longitudinal acceleration and speed (v) in heading direction (ψ) and a yaw rate sensor (ψ˙) which all have to fused with the position (x & y) from a GPS sensor.\r\n\r\n[View IPython Notebook](https://github.com/balzer82/Kalman/blob/master/Extended-Kalman-Filter-CTRA.ipynb?create=1)\r\n\r\n## License\r\n\r\n`CC-BY-SA2.0 Lizenz`\r\n",
  "google": "UA-46744695-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}